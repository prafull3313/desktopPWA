{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","readyToAdd","successfullyInstalled","acceptedInstall","declinedInstall","addToHome","bind","assertThisInitialized","shouldShowAddButton","openWindowOrTab","_this2","window","matchMedia","matches","console","log","setState","addEventListener","e","preventDefault","deferredPrompt","evt","_this3","prompt","userChoice","then","choiceResult","outcome","shouldShow","url","arguments","length","undefined","location","href","open","_this4","react_default","a","createElement","className","onClick","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60ab80d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            readyToAdd: false,\n            successfullyInstalled: false,\n            acceptedInstall: false,\n            declinedInstall: false,\n        };\n        this.addToHome = this.addToHome.bind(this);\n        this.shouldShowAddButton = this.shouldShowAddButton.bind(this);\n        this.openWindowOrTab = this.openWindowOrTab.bind(this);\n    }\n    componentDidMount() {\n        // check if user is already running app from home screen\n        if (window.matchMedia('(display-mode: standalone)').matches) {\n            console.log('App is already installed and running in standalone');\n            this.setState({\n                successfullyInstalled: true,\n            });\n        } else {\n            window.addEventListener('beforeinstallprompt', e => {\n                console.log('beforeinstallprompt has fired', e);\n                // Prevent Chrome 67 and earlier from automatically showing the prompt\n                e.preventDefault();\n                // Stash the event so it can be triggered later.\n                window.deferredPrompt = e;\n                this.setState({\n                    readyToAdd: true,\n                });\n            });\n            // this event fires only when app is installed\n            window.addEventListener('appinstalled', evt => {\n                console.log('App was successfully installed');\n                this.setState({\n                    successfullyInstalled: true,\n                });\n            });\n        }\n    }\n    addToHome() {\n        // Show the prompt\n        let { deferredPrompt } = window;\n        if (deferredPrompt) {\n            deferredPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            deferredPrompt.userChoice.then(choiceResult => {\n                if (choiceResult.outcome === 'accepted') {\n                    console.log('User accepted the A2HS prompt');\n                    this.setState({\n                        acceptedInstall: true,\n                    });\n                } else {\n                    console.log('User dismissed the A2HS prompt');\n                    this.setState({\n                        declinedInstall: true,\n                    });\n                }\n                deferredPrompt = null;\n            });\n        }\n    }\n    shouldShowAddButton() {\n        let shouldShow =\n            this.state.readyToAdd &&\n            !this.state.successfullyInstalled &&\n            !this.state.acceptedInstall &&\n            !this.state.declinedInstall;\n        console.log('Should show add button', shouldShow);\n        return shouldShow;\n    }\n    openWindowOrTab(url = window.location.href) {\n        window.open(url, '_blank');\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App-bar\" />\n                <header className=\"App-header\">\n                    <h1>Experimenting with Desktop PWAs</h1>\n                    {this.shouldShowAddButton() ? (\n                        <button onClick={this.addToHome}>\n                            Add to Home Screen\n                        </button>\n                    ) : null}\n                    <a href=\"https://www.desktop-pwas.com/\">Deep link</a>\n                    <a href=\"https://developers.google.com/web/progressive-web-apps\">\n                        PWAs\n                    </a>\n                    <a href=\"https://developers.google.com/web/progressive-web-apps/desktop\">\n                        Desktop PWAs\n                    </a>\n                    <a href=\"https://developers.google.com/web/fundamentals/app-install-banners/\">\n                        Install banners\n                    </a>\n                    <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\">\n                        Manifest\n                    </a>\n                    <a href=\"https://love2dev.com/blog/beforeinstallprompt/\">\n                        Understanding beforeinstallprompt\n                    </a>\n                    <a href=\"chrome://flags/\">Chrome Flags</a>\n                    <a onClick={this.openWindowOrTab}>\n                        window.open() in new window/tab for same domain\n                    </a>\n                    <a\n                        onClick={() =>\n                            this.openWindowOrTab('https://www.google.com/')\n                        }>\n                        window.open() in new window/tab for different domain\n                    </a>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}